<!DOCTYPE html>
<html lang="en-US">
<head>
    <meta charset="utf-8" />
    <title>Sample</title>

    <link href="https://cdn01.boxcdn.net/platform/elements/11.0.2/ja-JP/openwith.css" rel="stylesheet" type="text/css"></link>
    <link href="https://cdn01.boxcdn.net/platform/preview/2.34.0/ja-JP/preview.css" rel="stylesheet" type="text/css"></link>

    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=es6,Intl"></script>
    <script src="https://cdn01.boxcdn.net/polyfills/core-js/2.5.3/core.min.js"></script>

    <script src="https://cdn01.boxcdn.net/platform/elements/11.0.2/ja-JP/openwith.js"></script>
    <script src="https://cdn01.boxcdn.net/platform/preview/2.34.0/ja-JP/preview.js"></script>

    <style>
        .openwith-container {
            margin-left: 250px;
        }
        .preview-container {
            height: 800px;
            width: 100%;
        }
    </style>

</head>
<body>
<h3>File Id: <%= fileId %></h3>

<div id="container">
    <div class="openwith-container"></div>
    <div class="preview-container"></div>
</div>

<script>
    // app.jsから渡されたパラメータ
    window.fileId = "<%= fileId %>"
    window.token = "<%= token %>"

    const openWith = new Box.ContentOpenWith();
    openWith.show(fileId, token,  { container: ".openwith-container"})

    window.preview = new Box.Preview();
    preview.show(fileId, token, { container: ".preview-container", autoFocus: false });


    openWith.addListener("execute", async () => {
        // openWithが開かれたので、ロングポーリング開始

        // リアルタイムサーバーのURLを取得
        const optionsRes = await fetch("https://api.box.com/2.0/events", {
            method: "OPTIONS",
            headers: {
                "Content-Type": "application/json; charset=utf-8",
                "Authorization": `Bearer ${token}`,
            }
        });
        const optionsJRes = await optionsRes.json();

        let lastSequenceId = 0;
        const subscribe = async (streamPosition = "now") => {
            // リアルタイムサーバーに対してロングポーリングを行う
            // CORSエラーを避けるため、シンプルなリクエストを使う
            let rtsRes = await fetch(optionsJRes.entries[0].url, {
                method: "GET",
                mode: "no-cors",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                }
            })

            // ロングポーリングからはtype: "opaque"というのが帰ってくるのだけど、、よくわからない・・・。
            // とはいえ、応答が帰ってくると、何かのイベントが発生したことはわかる。
            // console.log("rtServer res", rtsRes)

            //　何かのイベントが発生したので、EventAPIをGETで叩き、詳細情報を取り出す
            const qs = new URLSearchParams();
            qs.set("event_type", "ITEM_UPLOAD"); // 更新だけに絞る。
            qs.set("stream_type", "sync");
            qs.set("stream_position", streamPosition); // 初回は"now", 2回め以降はnext_stream_positionが入る

            const getRes = await fetch(`https://api.box.com/2.0/events?${qs.toString()}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json; charset=utf-8",
                    "Authorization": `Bearer ${token}`,
                }
            });
            const getJRes = await getRes.json();

            // 複数もどってくるイベントを、対象ファイルの更新のもので、最新のものに絞る
            const latestEvent = getJRes.entries.reduce((acc, cur) => {
                if(cur.event_type === "ITEM_UPLOAD"
                    && cur.source
                    && cur.source.type === "file"
                    && cur.source.id === fileId) {
                    if(!acc) {
                        return cur;
                    }
                    return (cur.source.sequence_id > acc.source.sequence_id) ? cur : acc;
                }
                return null;
            }, null)

            // 前回処理したイベントより進んでいるときだけリロードする
            // 初回にstreamPosition === "now"でイベントを取得すると、イベントが何も帰ってこない。
            // 対象のファイルの更新イベントじゃないかもしれないけどリフレッシュかける。ここはもうちょっとうまくやれそうな気もする。
            if(streamPosition === "now" || latestEvent && latestEvent.source.sequence_id > lastSequenceId) {

                //　今回処理するイベントのsequence_idを保存
                if(latestEvent) {
                    lastSequenceId = latestEvent.source.sequence_id;
                }

                // previewだけを描画し直す。
                preview = new Box.Preview();
                // 毎回プレビューの位置までスクロールされたくないのでautoFocus:false
                preview.show(fileId, token, { container: ".preview-container", autoFocus: false });
            }
            // 次のイベントへ
            await subscribe(getJRes.next_stream_position)
        }
        // イベントの購読開始
        await subscribe();
    })

</script>
</body>
</html>
